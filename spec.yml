openapi: 3.0.0
info:
  version: '1'
  title: pyI40AAS REST API
  description: REST API Specification for the pyI40AAS framework. Any identifier variables are encoded as follows `{identifierType}:URIencode(URIencode({identifier}))`, e.g. `IRI:http:%252F%252Facplt.org%252Fasset`.
  termsOfService: None
  contact:
    name: 'Michael Hoffmeister, Manuel Sauer, Constantin Ziesche'
  license:
    name: Use under Eclipse Public License 2.0
    url: 'https://www.eclipse.org/legal/epl-2.0/'
servers: 
- url: http://{authority}/{basePath}/{api-version}
  description: "This is the Server to access the Asset Administration Shell"
  variables:
    authority: 
      default: localhost:8080
      description: The authority is the server url (made of IP-Address or DNS-Name, user information, and/or port information) of the hosting environment for the Asset Administration Shell
    basePath:
      default: api
      description: The basePath variable is additional path information for the hosting environment. It may contain the name of an aggregation point like 'shells' and/or API version information and/or tenant-id information, etc.
    api-version:
      default: v1
      description: The Version of the API-Specification
paths:
  '/aas/{identifier}':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Retrieves the Asset Administration Shell
      operationId: RetrieveAssetAdministrationShell
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AssetAdministrationShell'
        '404':
          description: No Concept Dictionary found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
  '/aas/{identifier}/asset':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Returns a reference to the asset of the Asset Administration Shell
      operationId: RetrieveAssetReference
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
  '/aas/{identifier}/submodels':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Returns a list of references to the submodels of the asset administration shell
      operationId: RetrieveAllSubmodelsReferences
      responses:
        '200':
          description: Returns a list of requested Submodels or its links
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
    post:
      summary: Adds a new Submodel reference to the Asset Administration Shell
      operationId: CreateSubmodelReference
      requestBody:
        description: The serialized Submodel reference
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Reference'
      responses:
        '201':
          description: Submodel reference created successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '409':
          description: Submodel reference already exists
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
  '/aas/{identifier}/views':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Retrieves all Views from the  Asset Administration Shell
      operationId: RetrieveAllViews
      responses:
        '200':
          description: Returns a list of requested Views or its links
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
    post:
      summary: Adds a new View
      operationId: CreateOrUpdateView
      requestBody:
        description: The serialized View
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/View'
      responses:
        '201':
          description: View created successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '409':
          description: View with given idShort already exists
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
  '/aas/{identifier}/views/{view-idShort}':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    - name: view-idShort
      in: path
      description: 'idShort of the view'
      required: true
      schema:
        type: string
    get:
      summary: Retrieves a specific View from the Asset Administration Shell
      operationId: RetrieveViewByIdShort
      responses:
        '200':
          description: View retrieved successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '404':
          description: No View found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
    put:
      summary: Updates a specific View from the Asset Administration Shell
      operationId: UpdateViewByIdShort
      responses:
        '200':
          description: View updated successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '404':
          description: No View found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
    delete:
      summary: Deletes a specific View from the Asset Administration Shell
      operationId: DeleteViewByIdShort
      responses:
        '204':
          description: View deleted successfully
        '404':
          description: No View found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
  '/aas/{identifier}/conceptDictionaries':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Retrieves all Concept Dictionaries of the  Asset Administration Shell
      operationId: RetrieveAllConceptDictionaries
      responses:
        '200':
          description: Returns a list of all Concept Dictionary
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
    post:
      summary: Adds a new Concept Dictionary 
      operationId: CreateConceptDictionary
      requestBody:
        description: The serialized Concept Dictionary
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ConceptDictionary'
      responses:
        '201':
          description: Concept Dictionary created successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '409':
          description: Concept Dictionary with given idShort already exists
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
  '/aas/{identifier}/conceptDictionaries/{cd-idShort}':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    - name: cd-idShort
      in: path
      description: The Concept Dictionary's short id
      required: true
      schema:
        type: string
    get:
      summary: Retrieves a specific Concept Dictionary 
      operationId: RetrieveConceptDictionaryByIdShort
      responses:
        '200':
          description: Returns the requested Concept Dictionary
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
        '404':
          description: No Concept Dictionary found
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
          
      tags:
        - Asset Administration Shell Interface
    put:
      summary: Update a specific Concept Dictionary 
      operationId: UpdateConceptDictionaryByIdShort
      responses:
        '200':
          description: Returns the updated Concept Dictionaries
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
        '404':
          description: No Concept Dictionary found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
    delete:
      summary: Deletes a specific Concept Dictionary
      operationId: DeleteConceptDictionaryByIdShort
      responses:
        '204':
          description: Concept Dictionary deleted successfully
        '404':
          description: No Concept Dictionary found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Asset Administration Shell Interface
  '/submodel/{identifier}':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Retrieves the entire Submodel
      operationId: RetrieveSubmodel
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '404':
          description: No Submodel found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Submodel Interface
  '/submodel/{identifier}/submodelElements':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Retrieves all Submodel-Elements from the current Submodel
      operationId: RetrieveAllSubmodelElements
      responses:
        '200':
          description: Returns a list of found Submodel-Elements
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Submodel Interface
    post:
      summary: Adds a new Submodel-Element to the Submodel
      operationId: CreateSubmodelElement
      requestBody:
        description: The Submodel-Element
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SubmodelElement'
      responses:
        '201':
          description: Submodel-Element created successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '409':
          description: Submodel-Element with given idShort already exists
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Submodel Interface
  '/submodel/{identifier}/submodelElements/{se-idShort}':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    - name: se-idShort
      in: path
      description: The Submodel-Element's short id
      required: true
      schema:
        type: string
    get:
      summary: Retrieves a specific Submodel-Element from the Submodel
      operationId: GetSubmodelElementByIdShort
      responses:
        '200':
          description: Returns the requested Submodel-Element
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '404':
          description: Submodel-Element not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Submodel Interface
    put:
      summary: Update a specific Submodel Element 
      operationId: UpdateSubmodelElementByIdShort
      requestBody:
        description: The Submodel-Element
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SubmodelElement'
      responses:
        '200':
          description: Returns the updated Submodel-Element
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
        '404':
          description: No Submodel-Element found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Submodel Interface
    delete:
      summary: Deletes a specific Submodel-Element from the Submodel
      operationId: DeleteSubmodelElementByIdShort
      responses:
        '204':
          description: Submodel-Element deleted successfully
        '404':
          description: Submodel-Element not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Submodel Interface
  '/conceptDictionary/{identifier}':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Retrieve Concept Dictionary by Identifier
      operationId: RetrieveConceptDictionary
      responses:
        '200':
          description: Return the requested Concept Dictionary
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '404':
          description: No Concept Dictionary found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Concept Dictionary Interface
  '/conceptDictionary/{identifier}/conceptDescriptions':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    get:
      summary: Retrieve all Concept Descriptions of the Concept Dictionary
      operationId: RetrieveConceptDescriptions
      responses:
        '200':
          description: Return Concept Descriptions
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
      - Concept Dictionary Interface
    post:
      summary: Creates a new Concept Description
      operationId: CreateOrUpdateConceptDescription
      requestBody:
        description: The serialized Concept Description
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Result'
      responses:
        '201':
          description: Concept Description created successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '409':
          description: Concept Description already exists
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Concept Dictionary Interface  
  '/conceptDictionary/{identifier}/conceptDescriptions/{cd-idShort}':
    parameters:
    - name: identifier
      in: path
      description: 'Serialized identifier'
      required: true
      schema:
        type: string
    - name: cd-idShort
      in: path
      description: The Concept Description's short id
      required: true
      schema:
        type: string
    get:
      summary: Retrieves a specific Concept Description
      operationId: RetrieveConceptDescriptionByIdShort
      responses:
        '200':
          description: Return the requested Concept Description
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '404':
          description: No Concept Description found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Concept Dictionary Interface
    put:
      summary: Updates a specific Concept Description
      operationId: UpdateConceptDescriptionByIdShort
      requestBody:
        description: The Concept Description
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ConceptDescription'
      responses:
        '200':
          description: Concept Description updated successfully
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        '404':
          description: No Concept Description found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
      - Concept Dictionary Interface
    delete:
      summary: Deletes a specific Concept Description
      operationId: DeleteConceptDescriptionByIdShort
      responses:
        '204':
          description: Concept Description deleted successfully
        '404':
          description: No Concept Description found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: Unexpected error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Result'
      tags:
        - Concept Dictionary Interface
components:
  schemas:
    Result:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        error:
          type: object
          nullable: true
          readOnly: true
          properties:
            errorType:
              enum:
              - Unspecified
              - Debug
              - Information
              - Warning
              - Error
              - Fatal
              - Exception
              type: string
            code:
              type: string
            text:
              type: string
        data:
          nullable: true
          readOnly: true
          oneOf:
            - $ref: '#/components/schemas/Referable'
            - type: array
              items:
                $ref: '#/components/schemas/Referable'
            - $ref: '#/components/schemas/Reference'
            - type: array
              items:
                $ref: '#/components/schemas/Reference'
    OperationRequest:
      type: object
      properties:
        requestId:
          type: string
        callbackUrls:
          type: object
          properties:
            failedUrl:
              type: string
            successUrl:
              type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/OperationVariable'
    EventSubscription:
      type: object
      properties:
        clientId:
          type: string
        endpoint:
          $ref: '#/components/schemas/Endpoint'
    AssetAdministrationShellDescriptor:
      type: object
      properties:
        idShort:
          type: string
        identification:
          $ref: '#/components/schemas/Identifier'
        administration:
          $ref: '#/components/schemas/AdministrativeInformation'
        description:
          type: array
          items:
            $ref: '#/components/schemas/LangString'
        asset:
          $ref: '#/components/schemas/Asset'
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
        submodelDescriptors:
          type: array
          items:
            $ref: '#/components/schemas/SubmodelDescriptor'
    SubmodelDescriptor:
      type: object
      properties:
        idShort:
          type: string
        identification:
          $ref: '#/components/schemas/Identifier'
        administration:
          $ref: '#/components/schemas/AdministrativeInformation'
        description:
          type: array
          items:
            $ref: '#/components/schemas/LangString'
        semanticId:
          $ref: '#/components/schemas/Reference'
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
    Endpoint:
      type: object
      properties:
        address:
          type: string
        type:
          type: string
        parameters:
          type: object
    Referable:
      type: object
      properties:
        idShort:
          type: string
        category:
          type: string
        description:
          type: array
          items:
            "$ref": "#/components/schemas/LangString"
        parent:
          "$ref": "#/components/schemas/Reference"
        modelType:
          "$ref": "#/components/schemas/ModelType"
      required:
      - idShort
      - modelType
    Identifiable:
      allOf:
      - "$ref": "#/components/schemas/Referable"
      - properties:
          identification:
            "$ref": "#/components/schemas/Identifier"
          administration:
            "$ref": "#/components/schemas/AdministrativeInformation"
        required:
        - identification
    Qualifiable:
      type: object
      properties:
        qualifiers:
          type: array
          items:
            "$ref": "#/components/schemas/Constraint"
    HasSemantics:
      type: object
      properties:
        semanticId:
          "$ref": "#/components/schemas/Reference"
      required:
      - semanticId
    HasDataSpecification:
      type: object
      properties:
        embeddedDataSpecifications:
          type: array
          items:
            "$ref": "#/components/schemas/EmbeddedDataSpecification"
    AssetAdministrationShell:
      allOf:
      - "$ref": "#/components/schemas/Identifiable"
      - "$ref": "#/components/schemas/HasDataSpecification"
      - properties:
          derivedFrom:
            "$ref": "#/components/schemas/Reference"
          asset:
            "$ref": "#/components/schemas/Reference"
          submodels:
            type: array
            items:
              "$ref": "#/components/schemas/Reference"
          views:
            type: array
            items:
              "$ref": "#/components/schemas/View"
          conceptDictionaries:
            type: array
            items:
              "$ref": "#/components/schemas/ConceptDictionary"
          security:
            "$ref": "#/components/schemas/Security"
        required:
        - asset
    Identifier:
      type: object
      properties:
        id:
          type: string
        idType:
          "$ref": "#/components/schemas/KeyType"
      required:
      - id
      - idType
    KeyType:
      type: string
      enum:
      - Custom
      - IRDI
      - IRI
      - IdShort
      - FragmentId
    AdministrativeInformation:
      type: object
      properties:
        version:
          type: string
        revision:
          type: string
    LangString:
      type: object
      properties:
        language:
          type: string
        text:
          type: string
      required:
      - language
      - text
    Reference:
      type: object
      properties:
        keys:
          type: array
          items:
            "$ref": "#/components/schemas/Key"
      required:
      - keys
    Key:
      type: object
      properties:
        type:
          "$ref": "#/components/schemas/KeyElements"
        idType:
          "$ref": "#/components/schemas/KeyType"
        value:
          type: string
        local:
          type: boolean
      required:
      - type
      - idType
      - value
      - local
    KeyElements:
      type: string
      enum:
      - Asset
      - AssetAdministrationShell
      - ConceptDescription
      - Submodel
      - AccessPermissionRule
      - AnnotatedRelationshipElement
      - BasicEvent
      - Blob
      - Capability
      - ConceptDictionary
      - DataElement
      - File
      - Entity
      - Event
      - MultiLanguageProperty
      - Operation
      - Property
      - Range
      - ReferenceElement
      - RelationshipElement
      - SubmodelElement
      - SubmodelElementCollection
      - View
      - GlobalReference
      - FragmentReference
    ModelTypes:
      type: string
      enum:
      - Asset
      - AssetAdministrationShell
      - ConceptDescription
      - Submodel
      - AccessPermissionRule
      - AnnotatedRelationshipElement
      - BasicEvent
      - Blob
      - Capability
      - ConceptDictionary
      - DataElement
      - File
      - Entity
      - Event
      - MultiLanguageProperty
      - Operation
      - Property
      - Range
      - ReferenceElement
      - RelationshipElement
      - SubmodelElement
      - SubmodelElementCollection
      - View
      - GlobalReference
      - FragmentReference
      - Constraint
      - Formula
      - Qualifier
    ModelType:
      type: object
      properties:
        name:
          "$ref": "#/components/schemas/ModelTypes"
      required:
      - name
    EmbeddedDataSpecification:
      type: object
      properties:
        dataSpecification:
          "$ref": "#/components/schemas/Reference"
        dataSpecificationContent:
          "$ref": "#/components/schemas/DataSpecificationContent"
      required:
      - dataSpecification
      - dataSpecificationContent
    DataSpecificationContent:
      oneOf:
      - "$ref": "#/components/schemas/DataSpecificationIEC61360Content"
      - "$ref": "#/components/schemas/DataSpecificationPhysicalUnitContent"
    DataSpecificationPhysicalUnitContent:
      type: object
      properties:
        unitName:
          type: string
        unitSymbol:
          type: string
        definition:
          type: array
          items:
            "$ref": "#/components/schemas/LangString"
        siNotation:
          type: string
        siName:
          type: string
        dinNotation:
          type: string
        eceName:
          type: string
        eceCode:
          type: string
        nistName:
          type: string
        sourceOfDefinition:
          type: string
        conversionFactor:
          type: string
        registrationAuthorityId:
          type: string
        supplier:
          type: string
      required:
      - unitName
      - unitSymbol
      - definition
    DataSpecificationIEC61360Content:
      allOf:
      - "$ref": "#/components/schemas/ValueObject"
      - type: object
        properties:
          dataType:
            enum:
            - DATE
            - STRING
            - STRING_TRANSLATABLE
            - REAL_MEASURE
            - REAL_COUNT
            - REAL_CURRENCY
            - BOOLEAN
            - URL
            - RATIONAL
            - RATIONAL_MEASURE
            - TIME
            - TIMESTAMP
          definition:
            type: array
            items:
              "$ref": "#/components/schemas/LangString"
          preferredName:
            type: array
            items:
              "$ref": "#/components/schemas/LangString"
          shortName:
            type: array
            items:
              "$ref": "#/components/schemas/LangString"
          sourceOfDefinition:
            type: string
          symbol:
            type: string
          unit:
            type: string
          unitId:
            "$ref": "#/components/schemas/Reference"
          valueFormat:
            type: string
          valueList:
            "$ref": "#/components/schemas/ValueList"
          levelType:
            type: array
            items:
              "$ref": "#/components/schemas/LevelType"
        required:
        - preferredName
    LevelType:
      type: string
      enum:
      - Min
      - Max
      - Nom
      - Typ
    ValueList:
      type: object
      properties:
        valueReferencePairTypes:
          type: array
          minItems: 1
          items:
            "$ref": "#/components/schemas/ValueReferencePairType"
      required:
      - valueReferencePairTypes
    ValueReferencePairType:
      allOf:
      - "$ref": "#/components/schemas/ValueObject"
    ValueObject:
      type: object
      properties:
        value:
          type: string
        valueId:
          "$ref": "#/components/schemas/Reference"
        valueType:
          type: string
          enum:
          - anyUri
          - base64Binary
          - boolean
          - date
          - dateTime
          - dateTimeStamp
          - decimal
          - integer
          - long
          - int
          - short
          - byte
          - nonNegativeInteger
          - positiveInteger
          - unsignedLong
          - unsignedInt
          - unsignedShort
          - unsignedByte
          - nonPositiveInteger
          - negativeInteger
          - double
          - duration
          - dayTimeDuration
          - yearMonthDuration
          - float
          - gDay
          - gMonth
          - gMonthDay
          - gYear
          - gYearMonth
          - hexBinary
          - NOTATION
          - QName
          - string
          - normalizedString
          - token
          - language
          - Name
          - NCName
          - ENTITY
          - ID
          - IDREF
          - NMTOKEN
          - time
    Asset:
      allOf:
      - "$ref": "#/components/schemas/Identifiable"
      - "$ref": "#/components/schemas/HasDataSpecification"
      - properties:
          kind:
            "$ref": "#/components/schemas/AssetKind"
          assetIdentificationModel:
            "$ref": "#/components/schemas/Reference"
          billOfMaterial:
            "$ref": "#/components/schemas/Reference"
        required:
        - kind
    AssetKind:
      type: string
      enum:
      - Type
      - Instance
    ModelingKind:
      type: string
      enum:
      - Template
      - Instance
    Submodel:
      allOf:
      - "$ref": "#/components/schemas/Identifiable"
      - "$ref": "#/components/schemas/HasDataSpecification"
      - "$ref": "#/components/schemas/Qualifiable"
      - "$ref": "#/components/schemas/HasSemantics"
      - properties:
          kind:
            "$ref": "#/components/schemas/ModelingKind"
          submodelElements:
            type: array
            items:
              "$ref": "#/components/schemas/SubmodelElement"
    Constraint:
      type: object
      properties:
        modelType:
          "$ref": "#/components/schemas/ModelType"
      required:
      - modelType
    Operation:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          inputVariable:
            type: array
            items:
              "$ref": "#/components/schemas/OperationVariable"
          outputVariable:
            type: array
            items:
              "$ref": "#/components/schemas/OperationVariable"
          inoutputVariable:
            type: array
            items:
              "$ref": "#/components/schemas/OperationVariable"
    OperationVariable:
      type: object
      properties:
        value:
          oneOf:
          - "$ref": "#/components/schemas/Blob"
          - "$ref": "#/components/schemas/File"
          - "$ref": "#/components/schemas/Capability"
          - "$ref": "#/components/schemas/Entity"
          - "$ref": "#/components/schemas/Event"
          - "$ref": "#/components/schemas/BasicEvent"
          - "$ref": "#/components/schemas/MultiLanguageProperty"
          - "$ref": "#/components/schemas/Operation"
          - "$ref": "#/components/schemas/Property"
          - "$ref": "#/components/schemas/Range"
          - "$ref": "#/components/schemas/ReferenceElement"
          - "$ref": "#/components/schemas/RelationshipElement"
          - "$ref": "#/components/schemas/SubmodelElementCollection"
      required:
      - value
    SubmodelElement:
      allOf:
      - "$ref": "#/components/schemas/Referable"
      - "$ref": "#/components/schemas/HasDataSpecification"
      - "$ref": "#/components/schemas/HasSemantics"
      - "$ref": "#/components/schemas/Qualifiable"
      - properties:
          kind:
            "$ref": "#/components/schemas/ModelingKind"
    Event:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
    BasicEvent:
      allOf:
      - "$ref": "#/components/schemas/Event"
      - properties:
          observed:
            "$ref": "#/components/schemas/Reference"
        required:
        - observed
    EntityType:
      type: string
      enum:
      - CoManagedEntity
      - SelfManagedEntity
    Entity:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          statements:
            type: array
            items:
              "$ref": "#/components/schemas/SubmodelElement"
          entityType:
            "$ref": "#/components/schemas/EntityType"
          asset:
            "$ref": "#/components/schemas/Reference"
        required:
        - entityType
    View:
      allOf:
      - "$ref": "#/components/schemas/Referable"
      - "$ref": "#/components/schemas/HasDataSpecification"
      - "$ref": "#/components/schemas/HasSemantics"
      - properties:
          containedElements:
            type: array
            items:
              "$ref": "#/components/schemas/Reference"
    ConceptDictionary:
      allOf:
      - "$ref": "#/components/schemas/Referable"
      - "$ref": "#/components/schemas/HasDataSpecification"
      - properties:
          conceptDescriptions:
            type: array
            items:
              "$ref": "#/components/schemas/Reference"
    ConceptDescription:
      allOf:
      - "$ref": "#/components/schemas/Identifiable"
      - "$ref": "#/components/schemas/HasDataSpecification"
      - properties:
          isCaseOf:
            type: array
            items:
              "$ref": "#/components/schemas/Reference"
    Capability:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
    Property:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - "$ref": "#/components/schemas/ValueObject"
    Range:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          valueType:
            type: string
            enum:
            - anyUri
            - base64Binary
            - boolean
            - date
            - dateTime
            - dateTimeStamp
            - decimal
            - integer
            - long
            - int
            - short
            - byte
            - nonNegativeInteger
            - positiveInteger
            - unsignedLong
            - unsignedInt
            - unsignedShort
            - unsignedByte
            - nonPositiveInteger
            - negativeInteger
            - double
            - duration
            - dayTimeDuration
            - yearMonthDuration
            - float
            - gDay
            - gMonth
            - gMonthDay
            - gYear
            - gYearMonth
            - hexBinary
            - NOTATION
            - QName
            - string
            - normalizedString
            - token
            - language
            - Name
            - NCName
            - ENTITY
            - ID
            - IDREF
            - NMTOKEN
            - time
          min:
            type: string
          max:
            type: string
        required:
        - valueType
        - min
        - max
    MultiLanguageProperty:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          value:
            type: array
            items:
              "$ref": "#/components/schemas/LangString"
          valueId:
            "$ref": "#/components/schemas/Reference"
    File:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          value:
            type: string
          mimeType:
            type: string
        required:
        - mimeType
        - value
    Blob:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          value:
            type: string
          mimeType:
            type: string
        required:
        - mimeType
        - value
    ReferenceElement:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          value:
            "$ref": "#/components/schemas/Reference"
    SubmodelElementCollection:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          value:
            type: array
            items:
              oneOf:
              - "$ref": "#/components/schemas/Blob"
              - "$ref": "#/components/schemas/File"
              - "$ref": "#/components/schemas/Capability"
              - "$ref": "#/components/schemas/Entity"
              - "$ref": "#/components/schemas/Event"
              - "$ref": "#/components/schemas/BasicEvent"
              - "$ref": "#/components/schemas/MultiLanguageProperty"
              - "$ref": "#/components/schemas/Operation"
              - "$ref": "#/components/schemas/Property"
              - "$ref": "#/components/schemas/Range"
              - "$ref": "#/components/schemas/ReferenceElement"
              - "$ref": "#/components/schemas/RelationshipElement"
              - "$ref": "#/components/schemas/SubmodelElementCollection"
          allowDuplicates:
            type: boolean
          ordered:
            type: boolean
    RelationshipElement:
      allOf:
      - "$ref": "#/components/schemas/SubmodelElement"
      - properties:
          first:
            "$ref": "#/components/schemas/Reference"
          second:
            "$ref": "#/components/schemas/Reference"
        required:
        - first
        - second
    AnnotatedRelationshipElement:
      allOf:
      - "$ref": "#/components/schemas/RelationshipElement"
      - properties:
          annotation:
            type: array
            items:
              "$ref": "#/components/schemas/Reference"
    Qualifier:
      allOf:
      - "$ref": "#/components/schemas/Constraint"
      - "$ref": "#/components/schemas/HasSemantics"
      - "$ref": "#/components/schemas/ValueObject"
      - properties:
          type:
            type: string
        required:
        - type
    Formula:
      allOf:
      - "$ref": "#/components/schemas/Constraint"
      - properties:
          dependsOn:
            type: array
            items:
              "$ref": "#/components/schemas/Reference"
    Security:
      type: object
      properties:
        accessControlPolicyPoints:
          "$ref": "#/components/schemas/AccessControlPolicyPoints"
        certificate:
          type: array
          items:
            oneOf:
            - "$ref": "#/components/schemas/BlobCertificate"
        requiredCertificateExtension:
          type: array
          items:
            "$ref": "#/components/schemas/Reference"
      required:
      - accessControlPolicyPoints
    Certificate:
      type: object
    BlobCertificate:
      allOf:
      - "$ref": "#/components/schemas/Certificate"
      - properties:
          blobCertificate:
            "$ref": "#/components/schemas/Blob"
          containedExtension:
            type: array
            items:
              "$ref": "#/components/schemas/Reference"
          lastCertificate:
            type: boolean
    AccessControlPolicyPoints:
      type: object
      properties:
        policyAdministrationPoint:
          "$ref": "#/components/schemas/PolicyAdministrationPoint"
        policyDecisionPoint:
          "$ref": "#/components/schemas/PolicyDecisionPoint"
        policyEnforcementPoint:
          "$ref": "#/components/schemas/PolicyEnforcementPoint"
        policyInformationPoints:
          "$ref": "#/components/schemas/PolicyInformationPoints"
      required:
      - policyAdministrationPoint
      - policyDecisionPoint
      - policyEnforcementPoint
    PolicyAdministrationPoint:
      type: object
      properties:
        localAccessControl:
          "$ref": "#/components/schemas/AccessControl"
        externalAccessControl:
          type: boolean
      required:
      - externalAccessControl
    PolicyInformationPoints:
      type: object
      properties:
        internalInformationPoint:
          type: array
          items:
            "$ref": "#/components/schemas/Reference"
        externalInformationPoint:
          type: boolean
      required:
      - externalInformationPoint
    PolicyEnforcementPoint:
      type: object
      properties:
        externalPolicyEnforcementPoint:
          type: boolean
      required:
      - externalPolicyEnforcementPoint
    PolicyDecisionPoint:
      type: object
      properties:
        externalPolicyDecisionPoints:
          type: boolean
      required:
      - externalPolicyDecisionPoints
    AccessControl:
      type: object
      properties:
        selectableSubjectAttributes:
          "$ref": "#/components/schemas/Reference"
        defaultSubjectAttributes:
          "$ref": "#/components/schemas/Reference"
        selectablePermissions:
          "$ref": "#/components/schemas/Reference"
        defaultPermissions:
          "$ref": "#/components/schemas/Reference"
        selectableEnvironmentAttributes:
          "$ref": "#/components/schemas/Reference"
        defaultEnvironmentAttributes:
          "$ref": "#/components/schemas/Reference"
        accessPermissionRule:
          type: array
          items:
            "$ref": "#/components/schemas/AccessPermissionRule"
    AccessPermissionRule:
      allOf:
      - "$ref": "#/components/schemas/Referable"
      - "$ref": "#/components/schemas/Qualifiable"
      - properties:
          targetSubjectAttributes:
            type: array
            items:
              "$ref": "#/components/schemas/SubjectAttributes"
            minItems: 1
          permissionsPerObject:
            type: array
            items:
              "$ref": "#/components/schemas/PermissionsPerObject"
        required:
        - targetSubjectAttributes
    SubjectAttributes:
      type: object
      properties:
        subjectAttributes:
          type: array
          items:
            "$ref": "#/components/schemas/Reference"
          minItems: 1
    PermissionsPerObject:
      type: object
      properties:
        object:
          "$ref": "#/components/schemas/Reference"
        targetObjectAttributes:
          "$ref": "#/components/schemas/ObjectAttributes"
        permission:
          type: array
          items:
            "$ref": "#/components/schemas/Permission"
    ObjectAttributes:
      type: object
      properties:
        objectAttribute:
          type: array
          items:
            "$ref": "#/components/schemas/Property"
          minItems: 1
    Permission:
      type: object
      properties:
        permission:
          "$ref": "#/components/schemas/Reference"
        kindOfPermission:
          type: string
          enum:
          - Allow
          - Deny
          - NotApplicable
          - Undefined
      required:
      - permission
      - kindOfPermission